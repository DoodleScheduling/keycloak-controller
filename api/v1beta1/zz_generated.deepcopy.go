//go:build !ignore_autogenerated

/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticationExecutionInfo) DeepCopyInto(out *AuthenticationExecutionInfo) {
	*out = *in
	if in.AuthenticationFlow != nil {
		in, out := &in.AuthenticationFlow, &out.AuthenticationFlow
		*out = new(bool)
		**out = **in
	}
	if in.Configurable != nil {
		in, out := &in.Configurable, &out.Configurable
		*out = new(bool)
		**out = **in
	}
	if in.RequirementChoices != nil {
		in, out := &in.RequirementChoices, &out.RequirementChoices
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticationExecutionInfo.
func (in *AuthenticationExecutionInfo) DeepCopy() *AuthenticationExecutionInfo {
	if in == nil {
		return nil
	}
	out := new(AuthenticationExecutionInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticatorConfig) DeepCopyInto(out *AuthenticatorConfig) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticatorConfig.
func (in *AuthenticatorConfig) DeepCopy() *AuthenticatorConfig {
	if in == nil {
		return nil
	}
	out := new(AuthenticatorConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClientMappingsRepresentation) DeepCopyInto(out *ClientMappingsRepresentation) {
	*out = *in
	if in.Mappings != nil {
		in, out := &in.Mappings, &out.Mappings
		*out = make([]RoleRepresentation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClientMappingsRepresentation.
func (in *ClientMappingsRepresentation) DeepCopy() *ClientMappingsRepresentation {
	if in == nil {
		return nil
	}
	out := new(ClientMappingsRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FederatedIdentity) DeepCopyInto(out *FederatedIdentity) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FederatedIdentity.
func (in *FederatedIdentity) DeepCopy() *FederatedIdentity {
	if in == nil {
		return nil
	}
	out := new(FederatedIdentity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIAuthenticationExecution) DeepCopyInto(out *KeycloakAPIAuthenticationExecution) {
	*out = *in
	if in.AuthenticatorFlow != nil {
		in, out := &in.AuthenticatorFlow, &out.AuthenticatorFlow
		*out = new(bool)
		**out = **in
	}
	if in.UserSetupAllowed != nil {
		in, out := &in.UserSetupAllowed, &out.UserSetupAllowed
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIAuthenticationExecution.
func (in *KeycloakAPIAuthenticationExecution) DeepCopy() *KeycloakAPIAuthenticationExecution {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIAuthenticationExecution)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIAuthenticationFlow) DeepCopyInto(out *KeycloakAPIAuthenticationFlow) {
	*out = *in
	if in.AuthenticationExecutions != nil {
		in, out := &in.AuthenticationExecutions, &out.AuthenticationExecutions
		*out = make([]KeycloakAPIAuthenticationExecution, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BuiltIn != nil {
		in, out := &in.BuiltIn, &out.BuiltIn
		*out = new(bool)
		**out = **in
	}
	if in.TopLevel != nil {
		in, out := &in.TopLevel, &out.TopLevel
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIAuthenticationFlow.
func (in *KeycloakAPIAuthenticationFlow) DeepCopy() *KeycloakAPIAuthenticationFlow {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIAuthenticationFlow)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIAuthenticatorConfig) DeepCopyInto(out *KeycloakAPIAuthenticatorConfig) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIAuthenticatorConfig.
func (in *KeycloakAPIAuthenticatorConfig) DeepCopy() *KeycloakAPIAuthenticatorConfig {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIAuthenticatorConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIClient) DeepCopyInto(out *KeycloakAPIClient) {
	*out = *in
	if in.SurrogateAuthRequired != nil {
		in, out := &in.SurrogateAuthRequired, &out.SurrogateAuthRequired
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.DefaultRoles != nil {
		in, out := &in.DefaultRoles, &out.DefaultRoles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RedirectUris != nil {
		in, out := &in.RedirectUris, &out.RedirectUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WebOrigins != nil {
		in, out := &in.WebOrigins, &out.WebOrigins
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.BearerOnly != nil {
		in, out := &in.BearerOnly, &out.BearerOnly
		*out = new(bool)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.StandardFlowEnabled != nil {
		in, out := &in.StandardFlowEnabled, &out.StandardFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ImplicitFlowEnabled != nil {
		in, out := &in.ImplicitFlowEnabled, &out.ImplicitFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DirectAccessGrantsEnabled != nil {
		in, out := &in.DirectAccessGrantsEnabled, &out.DirectAccessGrantsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ServiceAccountsEnabled != nil {
		in, out := &in.ServiceAccountsEnabled, &out.ServiceAccountsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PublicClient != nil {
		in, out := &in.PublicClient, &out.PublicClient
		*out = new(bool)
		**out = **in
	}
	if in.FrontchannelLogout != nil {
		in, out := &in.FrontchannelLogout, &out.FrontchannelLogout
		*out = new(bool)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolMappers != nil {
		in, out := &in.ProtocolMappers, &out.ProtocolMappers
		*out = make([]KeycloakProtocolMapper, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UseTemplateConfig != nil {
		in, out := &in.UseTemplateConfig, &out.UseTemplateConfig
		*out = new(bool)
		**out = **in
	}
	if in.UseTemplateScope != nil {
		in, out := &in.UseTemplateScope, &out.UseTemplateScope
		*out = new(bool)
		**out = **in
	}
	if in.UseTemplateMappers != nil {
		in, out := &in.UseTemplateMappers, &out.UseTemplateMappers
		*out = new(bool)
		**out = **in
	}
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make(map[string]bool, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OptionalClientScopes != nil {
		in, out := &in.OptionalClientScopes, &out.OptionalClientScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultClientScopes != nil {
		in, out := &in.DefaultClientScopes, &out.DefaultClientScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AuthorizationServicesEnabled != nil {
		in, out := &in.AuthorizationServicesEnabled, &out.AuthorizationServicesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AuthorizationSettings != nil {
		in, out := &in.AuthorizationSettings, &out.AuthorizationSettings
		*out = new(KeycloakResourceServer)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.AlwaysDisplayInConsole != nil {
		in, out := &in.AlwaysDisplayInConsole, &out.AlwaysDisplayInConsole
		*out = new(bool)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make(RoleRepresentationArray, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIClient.
func (in *KeycloakAPIClient) DeepCopy() *KeycloakAPIClient {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIClient)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIGroup) DeepCopyInto(out *KeycloakAPIGroup) {
	*out = *in
	if in.RealmRoles != nil {
		in, out := &in.RealmRoles, &out.RealmRoles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.ClientRoles != nil {
		in, out := &in.ClientRoles, &out.ClientRoles
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.SubGroups != nil {
		in, out := &in.SubGroups, &out.SubGroups
		*out = make([]apiextensionsv1.JSON, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIGroup.
func (in *KeycloakAPIGroup) DeepCopy() *KeycloakAPIGroup {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIPasswordReset) DeepCopyInto(out *KeycloakAPIPasswordReset) {
	*out = *in
	if in.Temporary != nil {
		in, out := &in.Temporary, &out.Temporary
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIPasswordReset.
func (in *KeycloakAPIPasswordReset) DeepCopy() *KeycloakAPIPasswordReset {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIPasswordReset)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIRealm) DeepCopyInto(out *KeycloakAPIRealm) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]KeycloakAPIUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clients != nil {
		in, out := &in.Clients, &out.Clients
		*out = make([]KeycloakAPIClient, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IdentityProviders != nil {
		in, out := &in.IdentityProviders, &out.IdentityProviders
		*out = make([]KeycloakIdentityProvider, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IdentityProviderMappers != nil {
		in, out := &in.IdentityProviderMappers, &out.IdentityProviderMappers
		*out = make([]KeycloakIdentityProviderMapper, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EventsListeners != nil {
		in, out := &in.EventsListeners, &out.EventsListeners
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.EventsEnabled != nil {
		in, out := &in.EventsEnabled, &out.EventsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]KeycloakAPIGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnabledEventTypes != nil {
		in, out := &in.EnabledEventTypes, &out.EnabledEventTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AdminEventsEnabled != nil {
		in, out := &in.AdminEventsEnabled, &out.AdminEventsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AdminEventsDetailsEnabled != nil {
		in, out := &in.AdminEventsDetailsEnabled, &out.AdminEventsDetailsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClientScopes != nil {
		in, out := &in.ClientScopes, &out.ClientScopes
		*out = make([]KeycloakClientScope, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDefaultClientScopes != nil {
		in, out := &in.DefaultDefaultClientScopes, &out.DefaultDefaultClientScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AuthenticationFlows != nil {
		in, out := &in.AuthenticationFlows, &out.AuthenticationFlows
		*out = make([]KeycloakAPIAuthenticationFlow, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AuthenticatorConfig != nil {
		in, out := &in.AuthenticatorConfig, &out.AuthenticatorConfig
		*out = make([]KeycloakAPIAuthenticatorConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserFederationProviders != nil {
		in, out := &in.UserFederationProviders, &out.UserFederationProviders
		*out = make([]KeycloakAPIUserFederationProvider, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UserFederationMappers != nil {
		in, out := &in.UserFederationMappers, &out.UserFederationMappers
		*out = make([]KeycloakAPIUserFederationMapper, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RegistrationAllowed != nil {
		in, out := &in.RegistrationAllowed, &out.RegistrationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationEmailAsUsername != nil {
		in, out := &in.RegistrationEmailAsUsername, &out.RegistrationEmailAsUsername
		*out = new(bool)
		**out = **in
	}
	if in.EditUsernameAllowed != nil {
		in, out := &in.EditUsernameAllowed, &out.EditUsernameAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ResetPasswordAllowed != nil {
		in, out := &in.ResetPasswordAllowed, &out.ResetPasswordAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RememberMe != nil {
		in, out := &in.RememberMe, &out.RememberMe
		*out = new(bool)
		**out = **in
	}
	if in.VerifyEmail != nil {
		in, out := &in.VerifyEmail, &out.VerifyEmail
		*out = new(bool)
		**out = **in
	}
	if in.LoginWithEmailAllowed != nil {
		in, out := &in.LoginWithEmailAllowed, &out.LoginWithEmailAllowed
		*out = new(bool)
		**out = **in
	}
	if in.DuplicateEmailsAllowed != nil {
		in, out := &in.DuplicateEmailsAllowed, &out.DuplicateEmailsAllowed
		*out = new(bool)
		**out = **in
	}
	if in.BruteForceProtected != nil {
		in, out := &in.BruteForceProtected, &out.BruteForceProtected
		*out = new(bool)
		**out = **in
	}
	if in.PermanentLockout != nil {
		in, out := &in.PermanentLockout, &out.PermanentLockout
		*out = new(bool)
		**out = **in
	}
	if in.FailureFactor != nil {
		in, out := &in.FailureFactor, &out.FailureFactor
		*out = new(int32)
		**out = **in
	}
	if in.WaitIncrementSeconds != nil {
		in, out := &in.WaitIncrementSeconds, &out.WaitIncrementSeconds
		*out = new(int32)
		**out = **in
	}
	if in.QuickLoginCheckMilliSeconds != nil {
		in, out := &in.QuickLoginCheckMilliSeconds, &out.QuickLoginCheckMilliSeconds
		*out = new(int64)
		**out = **in
	}
	if in.MinimumQuickLoginWaitSeconds != nil {
		in, out := &in.MinimumQuickLoginWaitSeconds, &out.MinimumQuickLoginWaitSeconds
		*out = new(int32)
		**out = **in
	}
	if in.MaxFailureWaitSeconds != nil {
		in, out := &in.MaxFailureWaitSeconds, &out.MaxFailureWaitSeconds
		*out = new(int32)
		**out = **in
	}
	if in.MaxDeltaTimeSeconds != nil {
		in, out := &in.MaxDeltaTimeSeconds, &out.MaxDeltaTimeSeconds
		*out = new(int32)
		**out = **in
	}
	if in.SMTPServer != nil {
		in, out := &in.SMTPServer, &out.SMTPServer
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.InternationalizationEnabled != nil {
		in, out := &in.InternationalizationEnabled, &out.InternationalizationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SupportedLocales != nil {
		in, out := &in.SupportedLocales, &out.SupportedLocales
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = new(RolesRepresentation)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultRole != nil {
		in, out := &in.DefaultRole, &out.DefaultRole
		*out = new(RoleRepresentation)
		(*in).DeepCopyInto(*out)
	}
	if in.ScopeMappings != nil {
		in, out := &in.ScopeMappings, &out.ScopeMappings
		*out = make([]ScopeMappingRepresentation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientScopeMappings != nil {
		in, out := &in.ClientScopeMappings, &out.ClientScopeMappings
		*out = make(map[string]ScopeMappingRepresentationArray, len(*in))
		for key, val := range *in {
			var outVal []ScopeMappingRepresentation
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(ScopeMappingRepresentationArray, len(*in))
				for i := range *in {
					(*in)[i].DeepCopyInto(&(*out)[i])
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.AccessTokenLifespanForImplicitFlow != nil {
		in, out := &in.AccessTokenLifespanForImplicitFlow, &out.AccessTokenLifespanForImplicitFlow
		*out = new(int32)
		**out = **in
	}
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(int32)
		**out = **in
	}
	if in.UserManagedAccessAllowed != nil {
		in, out := &in.UserManagedAccessAllowed, &out.UserManagedAccessAllowed
		*out = new(bool)
		**out = **in
	}
	if in.OtpPolicyDigits != nil {
		in, out := &in.OtpPolicyDigits, &out.OtpPolicyDigits
		*out = new(int32)
		**out = **in
	}
	if in.OtpPolicyInitialCounter != nil {
		in, out := &in.OtpPolicyInitialCounter, &out.OtpPolicyInitialCounter
		*out = new(int32)
		**out = **in
	}
	if in.OtpPolicyLookAheadWindow != nil {
		in, out := &in.OtpPolicyLookAheadWindow, &out.OtpPolicyLookAheadWindow
		*out = new(int32)
		**out = **in
	}
	if in.OtpPolicyPeriod != nil {
		in, out := &in.OtpPolicyPeriod, &out.OtpPolicyPeriod
		*out = new(int32)
		**out = **in
	}
	if in.OtpSupportedApplications != nil {
		in, out := &in.OtpSupportedApplications, &out.OtpSupportedApplications
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.BrowserSecurityHeaders != nil {
		in, out := &in.BrowserSecurityHeaders, &out.BrowserSecurityHeaders
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Components.DeepCopyInto(&out.Components)
	if in.DefaultOptionalClientScopes != nil {
		in, out := &in.DefaultOptionalClientScopes, &out.DefaultOptionalClientScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.OfflineSessionMaxLifespanEnabled != nil {
		in, out := &in.OfflineSessionMaxLifespanEnabled, &out.OfflineSessionMaxLifespanEnabled
		*out = new(bool)
		**out = **in
	}
	in.RequiredActions.DeepCopyInto(&out.RequiredActions)
	if in.RevokeRefreshToken != nil {
		in, out := &in.RevokeRefreshToken, &out.RevokeRefreshToken
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPolicyAcceptableAaguids != nil {
		in, out := &in.WebAuthnPolicyAcceptableAaguids, &out.WebAuthnPolicyAcceptableAaguids
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WebAuthnPolicyAvoidSameAuthenticatorRegister != nil {
		in, out := &in.WebAuthnPolicyAvoidSameAuthenticatorRegister, &out.WebAuthnPolicyAvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessAcceptableAaguids != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAcceptableAaguids, &out.WebAuthnPolicyPasswordlessAcceptableAaguids
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister, &out.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessSignatureAlgorithms != nil {
		in, out := &in.WebAuthnPolicyPasswordlessSignatureAlgorithms, &out.WebAuthnPolicyPasswordlessSignatureAlgorithms
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WebAuthnPolicySignatureAlgorithms != nil {
		in, out := &in.WebAuthnPolicySignatureAlgorithms, &out.WebAuthnPolicySignatureAlgorithms
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIRealm.
func (in *KeycloakAPIRealm) DeepCopy() *KeycloakAPIRealm {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIRealm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIUser) DeepCopyInto(out *KeycloakAPIUser) {
	*out = *in
	if in.EmailVerified != nil {
		in, out := &in.EmailVerified, &out.EmailVerified
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.RealmRoles != nil {
		in, out := &in.RealmRoles, &out.RealmRoles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ClientRoles != nil {
		in, out := &in.ClientRoles, &out.ClientRoles
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.RequiredActions != nil {
		in, out := &in.RequiredActions, &out.RequiredActions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FederatedIdentities != nil {
		in, out := &in.FederatedIdentities, &out.FederatedIdentities
		*out = make([]FederatedIdentity, len(*in))
		copy(*out, *in)
	}
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = make([]KeycloakCredential, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.DisableableCredentialTypes != nil {
		in, out := &in.DisableableCredentialTypes, &out.DisableableCredentialTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TOTP != nil {
		in, out := &in.TOTP, &out.TOTP
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIUser.
func (in *KeycloakAPIUser) DeepCopy() *KeycloakAPIUser {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIUserFederationMapper) DeepCopyInto(out *KeycloakAPIUserFederationMapper) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIUserFederationMapper.
func (in *KeycloakAPIUserFederationMapper) DeepCopy() *KeycloakAPIUserFederationMapper {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIUserFederationMapper)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakAPIUserFederationProvider) DeepCopyInto(out *KeycloakAPIUserFederationProvider) {
	*out = *in
	if in.ChangedSyncPeriod != nil {
		in, out := &in.ChangedSyncPeriod, &out.ChangedSyncPeriod
		*out = new(int32)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FullSyncPeriod != nil {
		in, out := &in.FullSyncPeriod, &out.FullSyncPeriod
		*out = new(int32)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakAPIUserFederationProvider.
func (in *KeycloakAPIUserFederationProvider) DeepCopy() *KeycloakAPIUserFederationProvider {
	if in == nil {
		return nil
	}
	out := new(KeycloakAPIUserFederationProvider)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakClient) DeepCopyInto(out *KeycloakClient) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakClient.
func (in *KeycloakClient) DeepCopy() *KeycloakClient {
	if in == nil {
		return nil
	}
	out := new(KeycloakClient)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakClient) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakClientList) DeepCopyInto(out *KeycloakClientList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KeycloakClient, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakClientList.
func (in *KeycloakClientList) DeepCopy() *KeycloakClientList {
	if in == nil {
		return nil
	}
	out := new(KeycloakClientList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakClientList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakClientScope) DeepCopyInto(out *KeycloakClientScope) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProtocolMappers != nil {
		in, out := &in.ProtocolMappers, &out.ProtocolMappers
		*out = make([]KeycloakProtocolMapper, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakClientScope.
func (in *KeycloakClientScope) DeepCopy() *KeycloakClientScope {
	if in == nil {
		return nil
	}
	out := new(KeycloakClientScope)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakClientSpec) DeepCopyInto(out *KeycloakClientSpec) {
	*out = *in
	if in.RealmSelector != nil {
		in, out := &in.RealmSelector, &out.RealmSelector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	in.Client.DeepCopyInto(&out.Client)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakClientSpec.
func (in *KeycloakClientSpec) DeepCopy() *KeycloakClientSpec {
	if in == nil {
		return nil
	}
	out := new(KeycloakClientSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakCredential) DeepCopyInto(out *KeycloakCredential) {
	*out = *in
	if in.Temporary != nil {
		in, out := &in.Temporary, &out.Temporary
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakCredential.
func (in *KeycloakCredential) DeepCopy() *KeycloakCredential {
	if in == nil {
		return nil
	}
	out := new(KeycloakCredential)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakIdentityProvider) DeepCopyInto(out *KeycloakIdentityProvider) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TrustEmail != nil {
		in, out := &in.TrustEmail, &out.TrustEmail
		*out = new(bool)
		**out = **in
	}
	if in.StoreToken != nil {
		in, out := &in.StoreToken, &out.StoreToken
		*out = new(bool)
		**out = **in
	}
	if in.AddReadTokenRoleOnCreate != nil {
		in, out := &in.AddReadTokenRoleOnCreate, &out.AddReadTokenRoleOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.LinkOnly != nil {
		in, out := &in.LinkOnly, &out.LinkOnly
		*out = new(bool)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakIdentityProvider.
func (in *KeycloakIdentityProvider) DeepCopy() *KeycloakIdentityProvider {
	if in == nil {
		return nil
	}
	out := new(KeycloakIdentityProvider)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakIdentityProviderMapper) DeepCopyInto(out *KeycloakIdentityProviderMapper) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakIdentityProviderMapper.
func (in *KeycloakIdentityProviderMapper) DeepCopy() *KeycloakIdentityProviderMapper {
	if in == nil {
		return nil
	}
	out := new(KeycloakIdentityProviderMapper)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakPolicy) DeepCopyInto(out *KeycloakPolicy) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ResourcesData != nil {
		in, out := &in.ResourcesData, &out.ResourcesData
		*out = make([]KeycloakResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ScopesData != nil {
		in, out := &in.ScopesData, &out.ScopesData
		*out = make([]apiextensionsv1.JSON, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakPolicy.
func (in *KeycloakPolicy) DeepCopy() *KeycloakPolicy {
	if in == nil {
		return nil
	}
	out := new(KeycloakPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakProtocolMapper) DeepCopyInto(out *KeycloakProtocolMapper) {
	*out = *in
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakProtocolMapper.
func (in *KeycloakProtocolMapper) DeepCopy() *KeycloakProtocolMapper {
	if in == nil {
		return nil
	}
	out := new(KeycloakProtocolMapper)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakRealm) DeepCopyInto(out *KeycloakRealm) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakRealm.
func (in *KeycloakRealm) DeepCopy() *KeycloakRealm {
	if in == nil {
		return nil
	}
	out := new(KeycloakRealm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakRealm) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakRealmList) DeepCopyInto(out *KeycloakRealmList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KeycloakRealm, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakRealmList.
func (in *KeycloakRealmList) DeepCopy() *KeycloakRealmList {
	if in == nil {
		return nil
	}
	out := new(KeycloakRealmList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakRealmList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakRealmSpec) DeepCopyInto(out *KeycloakRealmSpec) {
	*out = *in
	out.AuthSecret = in.AuthSecret
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(v1.Duration)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ReconcilerTemplate != nil {
		in, out := &in.ReconcilerTemplate, &out.ReconcilerTemplate
		*out = new(ReconcilerTemplate)
		(*in).DeepCopyInto(*out)
	}
	in.Realm.DeepCopyInto(&out.Realm)
	if in.ResourceSelector != nil {
		in, out := &in.ResourceSelector, &out.ResourceSelector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakRealmSpec.
func (in *KeycloakRealmSpec) DeepCopy() *KeycloakRealmSpec {
	if in == nil {
		return nil
	}
	out := new(KeycloakRealmSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakRealmStatus) DeepCopyInto(out *KeycloakRealmStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LastFailedRequests != nil {
		in, out := &in.LastFailedRequests, &out.LastFailedRequests
		*out = make([]RequestStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubResourceCatalog != nil {
		in, out := &in.SubResourceCatalog, &out.SubResourceCatalog
		*out = make([]ResourceReference, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakRealmStatus.
func (in *KeycloakRealmStatus) DeepCopy() *KeycloakRealmStatus {
	if in == nil {
		return nil
	}
	out := new(KeycloakRealmStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakResource) DeepCopyInto(out *KeycloakResource) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OwnerManagedAccess != nil {
		in, out := &in.OwnerManagedAccess, &out.OwnerManagedAccess
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]apiextensionsv1.JSON, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakResource.
func (in *KeycloakResource) DeepCopy() *KeycloakResource {
	if in == nil {
		return nil
	}
	out := new(KeycloakResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakResourceServer) DeepCopyInto(out *KeycloakResourceServer) {
	*out = *in
	if in.AllowRemoteResourceManagement != nil {
		in, out := &in.AllowRemoteResourceManagement, &out.AllowRemoteResourceManagement
		*out = new(bool)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]KeycloakPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KeycloakResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]KeycloakScope, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakResourceServer.
func (in *KeycloakResourceServer) DeepCopy() *KeycloakResourceServer {
	if in == nil {
		return nil
	}
	out := new(KeycloakResourceServer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakScope) DeepCopyInto(out *KeycloakScope) {
	*out = *in
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]KeycloakPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KeycloakResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakScope.
func (in *KeycloakScope) DeepCopy() *KeycloakScope {
	if in == nil {
		return nil
	}
	out := new(KeycloakScope)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakUser) DeepCopyInto(out *KeycloakUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakUser.
func (in *KeycloakUser) DeepCopy() *KeycloakUser {
	if in == nil {
		return nil
	}
	out := new(KeycloakUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakUserList) DeepCopyInto(out *KeycloakUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KeycloakUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakUserList.
func (in *KeycloakUserList) DeepCopy() *KeycloakUserList {
	if in == nil {
		return nil
	}
	out := new(KeycloakUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeycloakUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakUserRole) DeepCopyInto(out *KeycloakUserRole) {
	*out = *in
	if in.Composite != nil {
		in, out := &in.Composite, &out.Composite
		*out = new(bool)
		**out = **in
	}
	if in.ClientRole != nil {
		in, out := &in.ClientRole, &out.ClientRole
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakUserRole.
func (in *KeycloakUserRole) DeepCopy() *KeycloakUserRole {
	if in == nil {
		return nil
	}
	out := new(KeycloakUserRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeycloakUserSpec) DeepCopyInto(out *KeycloakUserSpec) {
	*out = *in
	if in.RealmSelector != nil {
		in, out := &in.RealmSelector, &out.RealmSelector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	in.User.DeepCopyInto(&out.User)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeycloakUserSpec.
func (in *KeycloakUserSpec) DeepCopy() *KeycloakUserSpec {
	if in == nil {
		return nil
	}
	out := new(KeycloakUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MappingsRepresentation) DeepCopyInto(out *MappingsRepresentation) {
	*out = *in
	if in.ClientMappings != nil {
		in, out := &in.ClientMappings, &out.ClientMappings
		*out = make(map[string]ClientMappingsRepresentation, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.RealmMappings != nil {
		in, out := &in.RealmMappings, &out.RealmMappings
		*out = make([]RoleRepresentation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MappingsRepresentation.
func (in *MappingsRepresentation) DeepCopy() *MappingsRepresentation {
	if in == nil {
		return nil
	}
	out := new(MappingsRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectMetadata) DeepCopyInto(out *ObjectMetadata) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectMetadata.
func (in *ObjectMetadata) DeepCopy() *ObjectMetadata {
	if in == nil {
		return nil
	}
	out := new(ObjectMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconcilerTemplate) DeepCopyInto(out *ReconcilerTemplate) {
	*out = *in
	in.ObjectMetadata.DeepCopyInto(&out.ObjectMetadata)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconcilerTemplate.
func (in *ReconcilerTemplate) DeepCopy() *ReconcilerTemplate {
	if in == nil {
		return nil
	}
	out := new(ReconcilerTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedirectorIdentityProviderOverride) DeepCopyInto(out *RedirectorIdentityProviderOverride) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedirectorIdentityProviderOverride.
func (in *RedirectorIdentityProviderOverride) DeepCopy() *RedirectorIdentityProviderOverride {
	if in == nil {
		return nil
	}
	out := new(RedirectorIdentityProviderOverride)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestStatus) DeepCopyInto(out *RequestStatus) {
	*out = *in
	in.SentAt.DeepCopyInto(&out.SentAt)
	out.Duration = in.Duration
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestStatus.
func (in *RequestStatus) DeepCopy() *RequestStatus {
	if in == nil {
		return nil
	}
	out := new(RequestStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceReference) DeepCopyInto(out *ResourceReference) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceReference.
func (in *ResourceReference) DeepCopy() *ResourceReference {
	if in == nil {
		return nil
	}
	out := new(ResourceReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleRepresentation) DeepCopyInto(out *RoleRepresentation) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.ClientRole != nil {
		in, out := &in.ClientRole, &out.ClientRole
		*out = new(bool)
		**out = **in
	}
	if in.Composite != nil {
		in, out := &in.Composite, &out.Composite
		*out = new(bool)
		**out = **in
	}
	if in.Composites != nil {
		in, out := &in.Composites, &out.Composites
		*out = new(RoleRepresentationComposites)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleRepresentation.
func (in *RoleRepresentation) DeepCopy() *RoleRepresentation {
	if in == nil {
		return nil
	}
	out := new(RoleRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in RoleRepresentationArray) DeepCopyInto(out *RoleRepresentationArray) {
	{
		in := &in
		*out = make(RoleRepresentationArray, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleRepresentationArray.
func (in RoleRepresentationArray) DeepCopy() RoleRepresentationArray {
	if in == nil {
		return nil
	}
	out := new(RoleRepresentationArray)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleRepresentationComposites) DeepCopyInto(out *RoleRepresentationComposites) {
	*out = *in
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleRepresentationComposites.
func (in *RoleRepresentationComposites) DeepCopy() *RoleRepresentationComposites {
	if in == nil {
		return nil
	}
	out := new(RoleRepresentationComposites)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RolesRepresentation) DeepCopyInto(out *RolesRepresentation) {
	*out = *in
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = make(map[string]RoleRepresentationArray, len(*in))
		for key, val := range *in {
			var outVal []RoleRepresentation
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(RoleRepresentationArray, len(*in))
				for i := range *in {
					(*in)[i].DeepCopyInto(&(*out)[i])
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = make([]RoleRepresentation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RolesRepresentation.
func (in *RolesRepresentation) DeepCopy() *RolesRepresentation {
	if in == nil {
		return nil
	}
	out := new(RolesRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScopeMappingRepresentation) DeepCopyInto(out *ScopeMappingRepresentation) {
	*out = *in
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeMappingRepresentation.
func (in *ScopeMappingRepresentation) DeepCopy() *ScopeMappingRepresentation {
	if in == nil {
		return nil
	}
	out := new(ScopeMappingRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in ScopeMappingRepresentationArray) DeepCopyInto(out *ScopeMappingRepresentationArray) {
	{
		in := &in
		*out = make(ScopeMappingRepresentationArray, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeMappingRepresentationArray.
func (in ScopeMappingRepresentationArray) DeepCopy() ScopeMappingRepresentationArray {
	if in == nil {
		return nil
	}
	out := new(ScopeMappingRepresentationArray)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretReference) DeepCopyInto(out *SecretReference) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretReference.
func (in *SecretReference) DeepCopy() *SecretReference {
	if in == nil {
		return nil
	}
	out := new(SecretReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TokenResponse) DeepCopyInto(out *TokenResponse) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TokenResponse.
func (in *TokenResponse) DeepCopy() *TokenResponse {
	if in == nil {
		return nil
	}
	out := new(TokenResponse)
	in.DeepCopyInto(out)
	return out
}
